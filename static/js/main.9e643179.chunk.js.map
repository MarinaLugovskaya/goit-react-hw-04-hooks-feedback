{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/Statistics.jsx","components/Section/Section.jsx","components/Notification/Notification.jsx","components/App.jsx","reportWebVitals.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","map","option","type","onClick","Statistics","good","neutral","bad","total","positivePercentage","section","title","children","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","persentage","Math","floor","countPositiveFeedbackPercentage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAEe,SAASA,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBACjD,OAAOD,EAAQE,KAAI,SAAAC,GAAM,OACvB,wBAAQC,KAAK,SAAsBC,QAAS,kBAAMJ,EAAgBE,IAAlE,SACGA,GADwBA,MCFhB,SAASG,EAAT,GAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC9D,OACE,+BACE,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,UCPS,SAASC,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,oCACE,6BAAKD,IACJC,KCJQ,SAASC,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,4BAAIA,ICgEE,SAASC,IAEtB,MAAwBC,mBAAS,GAAjC,mBAAOX,EAAP,KAAaY,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOV,EAAP,KAAgBY,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOT,EAAP,KAAYY,EAAZ,KAoBMC,EAAqB,WACzB,OAAOf,EAAOC,EAAUC,GAQ1B,OACE,qCACE,cAAC,EAAD,CAASI,MAAM,wBAAf,SACE,cAACd,EAAD,CACEC,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAhCgB,SAAAD,GACtB,OAAQA,GACN,IAAK,OACHmB,EAAQZ,EAAO,GACf,MAEF,IAAK,UACHa,EAAWZ,EAAU,GACrB,MAEF,IAAK,MACHa,EAAOZ,EAAM,GACb,MACF,QACE,aAsBDa,IACC,cAAC,EAAD,CAAST,MAAM,aAAf,SACE,cAACP,EAAD,CACEC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOY,IACPX,mBArB8B,WACtC,IAAIY,EAAaC,KAAKC,MAAOlB,EAAOe,IAAwB,KAC5D,OAAOC,GAA0B,EAmBLG,OAIxB,cAACX,EAAD,CAAcC,QAAQ,yBCxH9B,IAYeW,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACrB,EAAD,MAEFsB,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9e643179.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nexport default function FeedbackOptions({ options, onLeaveFeedback }) {\n  return options.map(option => (\n    <button type=\"button\" key={option} onClick={() => onLeaveFeedback(option)}>\n      {option}\n    </button>\n  ));\n}\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.number,\n  onLeaveFeedback: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\n\nexport default function Statistics({ good, neutral, bad, total, positivePercentage }) {\n  return (\n    <ul>\n      <li>Good: {good}</li>\n      <li>Neutral: {neutral}</li>\n      <li>Bad: {bad}</li>\n      <li>Total: {total}</li>\n      <li>Positive feedback: {positivePercentage}%</li>\n    </ul>\n  );\n}\n\nStatistics.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  positivePercentage: PropTypes.number,\n};\n","import PropTypes from 'prop-types';\n\nexport default function section({ title, children }) {\n  return (\n    <section>\n      <h1>{title}</h1>\n      {children}\n    </section>\n  );\n}\n\nsection.propTypes = {\n  title: PropTypes.string,\n};\n","import PropTypes from 'prop-types';\n\nexport default function Notification({ message }) {\n  return <p>{message}</p>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n","// import React, { Component } from 'react';\n// import FeedbackOptions from './FeedbackOptions/FeedbackOptions';\n// import Statistics from './Statistics/Statistics';\n// import Section from './Section/Section';\n// import Notification from './Notification/Notification';\n\n// export default class App extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n\n//   onLeaveFeedback = options => {\n//     this.setState(prevState => ({\n//       [options]: prevState[options] + 1,\n//     }));\n//   };\n\n\n//   countTotalFeedback = () => {\n//     const { good, neutral, bad } = this.state;\n//     return good + neutral + bad;\n//   };\n\n//   countPositiveFeedbackPercentage = () => {\n//     let persentage = Math.floor((this.state.good / this.countTotalFeedback()) * 100);\n//     return persentage ? persentage : 0;\n//   };\n\n//   render() {\n//     const { good, neutral, bad } = this.state;\n//     return (\n//       <>\n//         <Section title=\"Please leave feedback\">\n//           <FeedbackOptions\n//             options={Object.keys(this.state)}\n//             onLeaveFeedback={this.onLeaveFeedback}\n//           />\n//         </Section>\n\n//         {this.countTotalFeedback() ? (\n//           <Section title=\"Statistics\">\n//             <Statistics\n//               good={good}\n//               neutral={neutral}\n//               bad={bad}\n//               total={this.countTotalFeedback()}\n//               positivePercentage={this.countPositiveFeedbackPercentage()}\n//             />\n//           </Section>\n//         ) : (\n//           <Notification message=\"No feedback given\" />\n//         )}\n//       </>\n//     );\n//   }\n// }\n\n\nimport React, { useState } from 'react';\nimport FeedbackOptions from './FeedbackOptions/FeedbackOptions';\nimport Statistics from './Statistics/Statistics';\nimport Section from './Section/Section';\nimport Notification from './Notification/Notification';\n\n\nexport default function App() {\n\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const onLeaveFeedback = options => {\n    switch (options) {\n      case 'good':\n        setGood(good + 1);\n        break;\n\n      case 'neutral':\n        setNeutral(neutral + 1);\n        break;\n\n      case 'bad':\n        setBad(bad + 1);\n        break;\n      default:\n        return;\n    }\n  }\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    let persentage = Math.floor((good / countTotalFeedback()) * 100);\n    return persentage ? persentage : 0;\n  };\n\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={['good', 'neutral', 'bad']}\n          onLeaveFeedback={onLeaveFeedback}\n        />\n      </Section>\n\n      {countTotalFeedback() ? (\n        <Section title=\"Statistics\">\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          />\n        </Section>\n      ) : (\n        <Notification message=\"No feedback given\" />\n      )}\n    </>\n  );\n}","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}